{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "isValidateLeaveRequestTime",
    "fullyQualifiedName": "Utils.isValidateLeaveRequestTime",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Leave Request",
    "collectionId": "Leave Request_Utils",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "(startTimeString, endTimeString, listLeaveRequestRequestOrAccept) => {\n  const startTimeMoment = moment(startTimeString);\n  const endTimeMoment = moment(endTimeString);\n  if (startTimeMoment.isBefore(moment().set({\n    hour: 0\n  })) || endTimeMoment.isBefore(startTimeMoment)) {\n    return false;\n  }\n  const isNotValid = listLeaveRequestRequestOrAccept.some(leaveRequestOrAccept => {\n    const startMoment = moment(leaveRequestOrAccept['Start Date']);\n    const endMoment = moment(leaveRequestOrAccept['End Date']);\n    return startTimeMoment.diff(startMoment) >= 0 && startTimeMoment.diff(endMoment) <= 0 || endTimeMoment.diff(startMoment) >= 0 && endTimeMoment.diff(endMoment) <= 0;\n  });\n  return !isNotValid;\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [
        {},
        {},
        {}
      ],
      "isAsync": false
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "(startTimeString, endTimeString, listLeaveRequestRequestOrAccept) => {\n  const startTimeMoment = moment(startTimeString);\n  const endTimeMoment = moment(endTimeString);\n  if (startTimeMoment.isBefore(moment().set({\n    hour: 0\n  })) || endTimeMoment.isBefore(startTimeMoment)) {\n    return false;\n  }\n  const isNotValid = listLeaveRequestRequestOrAccept.some(leaveRequestOrAccept => {\n    const startMoment = moment(leaveRequestOrAccept['Start Date']);\n    const endMoment = moment(leaveRequestOrAccept['End Date']);\n    return startTimeMoment.diff(startMoment) >= 0 && startTimeMoment.diff(endMoment) <= 0 || endTimeMoment.diff(startMoment) >= 0 && endTimeMoment.diff(endMoment) <= 0;\n  });\n  return !isNotValid;\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Leave Request_Utils.isValidateLeaveRequestTime",
  "deleted": false,
  "gitSyncId": "63a05b5f4f35af560dc135d6_63a40ae76a0d0c01bfb02dca"
}